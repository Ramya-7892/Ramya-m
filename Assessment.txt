Q1.
def max_steal(val):
    n = len(val)
    if n == 0:
        return 0
    if n == 1:
        return val[0]
    
    dp = [0] * n
    dp[0] = val[0]
    dp[1] = max(val[0], val[1])
    
    for i in range(2, n):
        dp[i] = max(val[i] + dp[i-2], dp[i-1])
    
    return dp[-1]

val = [6, 7, 1, 3, 8, 2, 5]
print(max_steal(val))  

Q2.
#include <stdio.h>

int main() {
    int n = 5;  
    
    for (int i = 0; i < n; i++) {      
        for (int j = 0; j < n; j++) {     
            if (i % 2 == 0) {              
                if (j == n-1)
                    printf("%d", i+2);
                else
                    printf("%d", i+3);
            } else {                     
                if (j == 0)
                    printf("%d", i+2);
                else
                    printf("%d", i+1);
            }
        }
        printf("\n");  
    }
    
    return 0;
}

Q3.
def is_disarium(num):
    str_num = str(num)
    total = 0
    for idx, digit in enumerate(str_num):
        total += int(digit) ** (idx + 1)
    return total == num

def first_n_disarium(n):
    result = []
    num = 0
    while len(result) < n:
        if is_disarium(num):
            result.append(num)
        num += 1
    return result

def disarium_between(start, end):
    return [num for num in range(start, end + 1) if is_disarium(num)]

n = 10
print(f"First {n} Disarium numbers:")
print(first_n_disarium(n))

start = 1
end = 200
print(f"\nDisarium numbers between {start} and {end}:")
print(disarium_between(start, end))